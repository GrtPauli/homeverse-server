# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Comment {
  content: String!
  date: Timestamp!
  nickname: String
}

input CommentInput {
  content: String!
  nickname: String
  recipeId: ID!
}

type Contact {
  createdAt: Float
  email: String
  id: ID
  name: String
  photo: String
  status: ContactRequestPosition
}

type ContactRequest {
  createdAt: Float
  email: String
  id: ID
  msg: String
  name: String
  photo: String
  position: ContactStatus
}

input ContactRequestInput {
  email: String
  id: ID
  msg: String
  name: String
  photo: String
}

"""Describing whether you are sender or reciever of a request"""
enum ContactRequestPosition {
  ACTIVE_LISTING
  APPOINTMENT_SET
  ATTEMPTED_CONTACT
  LISTING_AGREEMENT
  MET_WITH_CUSTOMER
  NEW
  REJECTED
  SALE_CLOSED
  SPOKE_WITH_CUSTOMER
}

"""Describing current status of communication with contact"""
enum ContactStatus {
  RECEIVER
  SENDER
}

input CreateListingInput {
  address: String
  agent: ListingParticipantInput
  agentId: String
  appliances: [String!]
  architecturalStyle: String
  basement: String
  basementSqFt: Float
  bathrooms: Float
  bedrooms: Float
  buildingAmenities: [String!]
  city: String
  coolingType: [String!]
  description: String
  exterior: [String!]
  floorCovering: [String!]
  garageSqFt: Float
  garages: Float
  heatingFuel: [String!]
  heatingType: [String!]
  homeType: String
  indoorFeatures: [String!]
  outdoorAmenities: [String!]
  owner: ListingParticipantInput
  ownerId: String
  parking: [String!]
  photos: [IListingImageInput!]
  price: Float
  propertySize: Float
  propertySizeUnit: String
  relatedWebsite: String
  roof: [String!]
  rooms: [String!]
  state: String
  totalRooms: Float
  view: [String!]
  virtualTourURL: String
  yearBuilt: Float
  zip: Float
}

input CreateTourInput {
  agentId: String!
  agentName: String!
  agentPhoto: String!
  method: TourMethod!
  propertyId: ID!
  propertyListingDate: Timestamp!
  tourScheduledDate: Timestamp!
  tourStatus: TourStatus!
  touristId: String!
  touristName: String!
  touristPhoto: String!
  vcRoomId: String
}

input CreateTourRequestInput {
  agentId: String!
  agentName: String!
  method: TourMethod!
  propertyId: ID!
  propertyListingDate: Timestamp!
  tourScheduledDate: Timestamp!
  touristId: String!
  touristName: String!
}

input CreateUserInput {
  email: String!
  firstname: String!
  lastname: String!
  password: String!
  profileId: ID
  userType: UserType
}

input FilterProfileInput {
  city: String
  country: String
  displayName: String
  state: String
  userType: UserType
}

input GenerateZegoTokenInput {
  appID: Float!
  secret: String!
  userId: String!
}

input GetTourInfoInput {
  agentId: String
  touristId: String
}

type HomePage {
  newListings: [Listing!]!
  topAgents: [Profile!]!
}

type IListingImage {
  id: String!
  name: String!
  uri: String!
}

input IListingImageInput {
  id: String!
  name: String!
  uri: String!
}

type Listing {
  _id: ID!
  address: String
  agent: ListingParticipant
  agentId: String
  appliances: [String!]
  architecturalStyle: String
  basement: String
  basementSqFt: Float
  bathrooms: Float
  bedrooms: Float
  buildingAmenities: [String!]
  city: String
  coolingType: [String!]
  createdAt: Timestamp!
  description: String
  exterior: [String!]
  floorCovering: [String!]
  garageSqFt: Float
  garages: Float
  heatingFuel: [String!]
  heatingType: [String!]
  homeType: String
  indoorFeatures: [String!]
  outdoorAmenities: [String!]
  owner: ListingParticipant
  ownerId: String
  parking: [String!]
  photos: [IListingImage!]
  price: Float
  propertySize: Float
  propertySizeUnit: String
  relatedWebsite: String
  roof: [String!]
  rooms: [String!]
  state: String
  status: ListingStatus
  totalRooms: Float
  updatedAt: Timestamp!
  view: [String!]
  virtualTourURL: String
  yearBuilt: Float
  zip: Float
}

input ListingFilterInput {
  bathrooms: String
  bedrooms: String
  city: String
  maxPrice: Float
  minPrice: Float
  state: String
}

type ListingParticipant {
  id: String!
  name: String!
  photo: String!
}

input ListingParticipantInput {
  id: String!
  name: String!
  photo: String!
}

"""Different units for determing the property size"""
enum ListingStatus {
  ACTIVE
  IN_TRANSACTION
  SOLD
  UNLISTED
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  _id: String!
  access_token: String!
  email: String!
  firstname: String!
  lastname: String!
  profileId: ID
  userType: UserType
}

type Message {
  content: String!
  senderId: ID!
}

type MessageRoom {
  _id: ID!
  members: [ID!]!
  messages: [Message!]!
}

type Mutation {
  acceptContactRequest(receiverId: String!, senderId: String!): Boolean!
  addNewComment(comment: CommentInput!): Boolean!
  createListing(listing: CreateListingInput!): Listing!
  createProfile(userId: String!): Profile!
  createTour(tour: CreateTourInput!): Tour!
  createTourRequest(request: CreateTourRequestInput!): TourRequest!
  createUser(user: CreateUserInput!): User!
  generateZegoToken(generateZegoTokenInput: GenerateZegoTokenInput!): String!
  login(user: LoginInput!): LoginResponse!
  sendContactRequest(receiver: ContactRequestInput!, sender: ContactRequestInput!): Boolean!
  sendMessage(message: SendMessageInput!): Boolean!
  updateListing(id: String!, listing: UpdateListingInput!): Listing!
  updateProfile(id: String!, profile: UpdateProfileInput!): Boolean!
  updateTour(id: String!, tour: UpdateTourInput!): Tour!
  updateTourRequestStatus(id: String!, request: UpdateTourRequestStatusInput!, vcRoomId: String): TourRequest!
  updateUser(user: UpdateUserInput!): User!
}

type Profile {
  _id: ID!
  about: String
  address: String
  blog: String
  brokerageAddress: String
  brokerageName: String
  brokeragePhone: String
  city: String
  contactRequests: [ContactRequest!]
  contacts: [Contact!]
  country: String
  countryFlag: String
  displayName: String
  facebook: String
  inBusinessSince: String
  languages: [String!]
  linkedIn: String
  phone: String
  photo: String
  primaryPhone: String
  professionalTitle: String
  profileVideo: String
  reviews: [String!]
  state: String
  twitter: String
  userId: ID!
  userType: UserType
  website: String
}

type Query {
  getAgents: [User!]!
  getListing(id: String!): Listing!
  getListings(filter: ListingFilterInput): [Listing!]!
  getMe: User!
  getMessageRoom(id: String!): MessageRoom!
  getMyProfile: Profile!
  getProfiles(filter: FilterProfileInput!): [Profile!]!
  getTourRequests(input: GetTourInfoInput!): [TourRequest!]!
  getTours(input: GetTourInfoInput!): [Tour!]!
  getUser(id: String!): User!
  getUserListings(filter: UserListingFilter!): [Listing!]!
  getUserProfile(id: String!): Profile!
  homePage: HomePage!
  recipe(id: ID!): Recipe
  sendOTP(number: String!): String!
  verifyOTP(number: String!, otp: String!): String!
}

type Recipe {
  comments: [Comment!]!
  description: String
  id: ID!
  title: String!
}

type Review {
  comment: String!
  createdAt: Timestamp!
  name: String!
  photo: String!
  rating: Float!
  updatedAt: Timestamp!
}

input ReviewInput {
  comment: String!
  createdAt: Timestamp
  name: String!
  photo: String!
  rating: Float!
  updatedAt: Timestamp
}

input SendMessageInput {
  content: String!
  messageRoomId: String!
}

type Subscription {
  newComments(recipeId: ID!): Comment!
  newMessage(messageRoomId: String!): Message!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type Tour {
  _id: ID!
  agentId: String!
  agentName: String!
  agentPhoto: String!
  createdAt: Timestamp!
  method: TourMethod!
  propertyId: ID!
  propertyListingDate: Timestamp!
  tourReview: Review
  tourScheduledDate: Timestamp!
  tourStatus: TourStatus!
  touristId: String!
  touristName: String!
  touristPhoto: String!
  updatedAt: Timestamp!
  vcRoomId: String
}

"""Two different methods used for touring homes"""
enum TourMethod {
  IN_PERSON
  VIDEO_CALL
}

type TourRequest {
  _id: ID!
  agentId: String!
  agentName: String!
  createdAt: Timestamp!
  method: TourMethod!
  propertyId: ID!
  propertyListingDate: Timestamp!
  requestStatus: TourRequestStatus
  tourScheduledDate: Timestamp!
  touristId: String!
  touristName: String!
  updatedAt: Timestamp!
}

"""Representing the status of a tour request"""
enum TourRequestStatus {
  ACCEPTED
  CANCELLED
  PENDING
}

"""Representing the status of a tour"""
enum TourStatus {
  CANCELLED
  COMPLETED
  PENDING
  REQUEST
}

input UpdateListingInput {
  address: String
  agent: ListingParticipantInput
  agentId: String
  appliances: [String!]
  architecturalStyle: String
  basement: String
  basementSqFt: Float
  bathrooms: Float
  bedrooms: Float
  buildingAmenities: [String!]
  city: String
  coolingType: [String!]
  description: String
  exterior: [String!]
  floorCovering: [String!]
  garageSqFt: Float
  garages: Float
  heatingFuel: [String!]
  heatingType: [String!]
  homeType: String
  indoorFeatures: [String!]
  outdoorAmenities: [String!]
  owner: ListingParticipantInput
  ownerId: String
  parking: [String!]
  photos: [IListingImageInput!]
  price: Float
  propertySize: Float
  propertySizeUnit: String
  relatedWebsite: String
  roof: [String!]
  rooms: [String!]
  state: String
  status: ListingStatus
  totalRooms: Float
  view: [String!]
  virtualTourURL: String
  yearBuilt: Float
  zip: Float
}

input UpdateProfileInput {
  about: String
  address: String
  blog: String
  brokerageAddress: String
  brokerageName: String
  brokeragePhone: String
  city: String
  country: String
  countryFlag: String
  displayName: String
  facebook: String
  inBusinessSince: String
  languages: [String!]
  linkedIn: String
  phone: String
  photo: String
  primaryPhone: String
  professionalTitle: String
  profileVideo: String
  reviews: [String!]
  state: String
  twitter: String
  userType: UserType
  website: String
}

input UpdateTourInput {
  tourReview: ReviewInput
  tourStatus: TourStatus
  vcRoomId: String
}

input UpdateTourRequestStatusInput {
  requestStatus: TourRequestStatus!
}

input UpdateUserInput {
  firstname: String
  lastname: String
  userType: UserType
}

type User {
  _id: String!
  email: String!
  firstname: String!
  lastname: String!
  profileId: ID
  userType: UserType
}

input UserListingFilter {
  agentId: String
  ownerId: String
}

"""Various user types"""
enum UserType {
  AGENT
  BUYER
  BUYER_OR_SELLER
  SELLER
}